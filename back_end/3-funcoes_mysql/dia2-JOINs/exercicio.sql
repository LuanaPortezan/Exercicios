-- Fa√ßa os exerc√≠cios 1 a 6 utilizando banco de dados pixar abaixo:
-- Exerc√≠cio 1: Utilizando o INNER JOIN, encontre as vendas nacionais (domestic_sales) e internacionais (international_sales) de cada filme.
USE pixar;
SELECT * FROM movies;
SELECT * FROM box_office;

SELECT
  movies.title,
  box_office.domestic_sales,
  box_office.international_sales
  -- as informa√ß√µes que eu quero exigir no meu relat√≥rio: filmes (title), vendas nacionais (domestic_sales) e internacionais (international_sales)
FROM
  pixar.movies
  -- onde vem a informa√ß√£o do filme, vem da tabela movies
  INNER JOIN
  pixar.box_office
  -- a tabela de bilheteria que quero juntar informa√ß√µes
  ON box_office.movie_id = movies.id;
  -- ON √© a parte que conecta as tabelas
  -- condi√ß√£o: a identifica√ß√£o do filmes em bilheteria (movie_id) da tabela  bilheteria (box_office) deve ser igual a identifica√ß√£o (id) da tabela de filmes (movies)


-- üöÄ Exerc√≠cio 2: Utilizando o INNER JOIN, fa√ßa uma busca que retorne o n√∫mero de vendas para cada filme que possui um n√∫mero maior de vendas internacionais (international_sales) do que vendas nacionais (domestic_sales).
SELECT * FROM movies;
SELECT * FROM box_office;

SELECT
  movies.title,
  (box_office.domestic_sales + box_office.international_sales) AS vendas
  -- informa√ß√µes que quero mostrar: soma das vendas e os filmes
FROM
  pixar.movies
  INNER JOIN
  pixar.box_office
  ON box_office.movie_id = movies.id
  -- detalhe para prestar aten√ß√£o: a interse√ß√£o entre as tabelas n√£o mudou
WHERE
  box_office.international_sales > box_office.domestic_sales;
  -- condicional: filme que possui o n√∫mero maior de vendas internacionais (international_sales) do que vendas nacionais (domestic_sales)


-- üöÄ Exerc√≠cio 3: Utilizando o INNER JOIN, fa√ßa uma busca que retorne os filmes e sua avalia√ß√£o (rating) em ordem decrescente.
SELECT * FROM movies;
SELECT * FROM box_office;

SELECT
  movies.title,
  box_office.rating
  -- informa√ß√µes que quero mostrar
FROM
  pixar.movies
  INNER JOIN
  pixar.box_office
  ON box_office.movie_id = movies.id
  -- tabelas usadas e sua liga√ß√£o entre si
ORDER BY box_office.rating DESC;
-- condicional: avalia√ß√£o (rating) em ordem decrescente


-- Exerc√≠cio 4: Utilizando o LEFT JOIN, fa√ßa uma busca que retorne todos os dados dos cinemas, mesmo os que n√£o possuem filmes em cartaz e, adicionalmente, os dados dos filmes que est√£o em cartaz nestes cinemas. Retorne os nomes dos cinemas em ordem alfab√©tica.
SELECT * FROM movies;
SELECT * FROM theater;
SELECT
  movie_in_theaters.name,
  movie_in_theaters.location,
  movies.title,
  movies.director,
  movies.year,
  movies.length_minutes
  -- todas as informa√ß√µes que quero mostrar
FROM
  pixar.theater AS movie_in_theaters
  -- tabela theater ser√° minha tabela de referencia para o LEFT JOIN da tabela movies
  LEFT JOIN
  pixar.movies
  -- a tabela que quero comparar (lembrando que a referencia √© a tabela theater)
  ON movie_in_theaters.id = movies.theater_id
  -- o registro de identifica√ß√£o (id) dos filmes em cartaz da tabela theater deve ser igual ao registro theater_id da tabela movies. O QUE AS TABELAS TEM EM COMUM PARA COMPRAR
ORDER BY movie_in_theaters.name;
-- ordenado pelo nome dos filmes em cartaz


-- Exerc√≠cio 5: Utilizando o RIGHT JOIN, fa√ßa uma busca que retorne todos os dados dos filmes, mesmo os que n√£o est√£o em cartaz e, adicionalmente, os dados dos cinemas que possuem estes filmes em cartaz. Retorne os nomes dos cinemas em ordem alfab√©tica.
SELECT * FROM movies;
SELECT * FROM theater;

SELECT
  movie_in_theaters.id,
  movie_in_theaters.name,
  movie_in_theaters.location,
  movies.title,
  movies.director,
  movies.year,
  movies.length_minutes
  -- todas as informa√ß√µes que quero mostrar
FROM
  pixar.theater AS movie_in_theaters
  -- tabela dos filmes em cartaz
  RIGHT JOIN
  pixar.movies
  ON movie_in_theaters.id = movies.theater_id
  -- tabelas usadas e sua liga√ß√£o entre si
ORDER BY movie_in_theaters.name;
-- condicional: nomes dos cinemas em ordem alfab√©tica

-- üöÄ Exerc√≠cio 6: Utilizando o INNER JOIN, selecione todas as informa√ß√µes dos filmes que est√£o em cartaz (possuem theater_id diferente de NULL) com avalia√ß√£o maior que 8.
SELECT * FROM movies;
SELECT * FROM box_office;

SELECT
  movies.id,
  movies.title,
  movies.director,
  movies.year,
  movies.length_minutes,
  movies.theater_id
  -- toda as informa√ß√µes que eu quero mostrar
FROM
  pixar.movies
  INNER JOIN
  pixar.box_office
  ON box_office.movie_id = movies.id
  -- as tabelas usadas e as liga√ß√µes de compara√ß√£o entre si
WHERE
  box_office.rating > 8
    AND movies.theater_id IS NOT NULL;
    -- condicional: apenas os filmes que est√£o em cartaz E possuem avalia√ß√£o maior que 8

-------------------- Zambelli --------------------
-- ATIVIDADE EXTRA: Gerar uma lista com a quantidade de filmes por diretor, com o total de bilheteria (domestica e internacional) ordenado pela total de bilheteria?
SELECT * FROM movies;
SELECT * FROM box_office;

SELECT 
  movies.director,
  COUNT(box_office.domestic_sales + box_office.international_sales) AS bilheteria_total
  --informa√ß√µes que quero mostrar
FROM
  pixar.movies
  INNER JOIN
  pixar.box_office
  ON box_office.movie_id = movies.id
  -- rela√ß√£o entre as tabelas usadas
GROUP BY director
-- condicional: agrupar a lista por diretor (gerar uma lista com a quantidade de filmes por diretor)
ORDER BY bilheteria_total;
-- condicional: ordenado pela total de bilheteria
