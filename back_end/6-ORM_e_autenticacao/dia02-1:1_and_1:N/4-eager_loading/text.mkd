Eager Loading
Esse método carrega todos os dados na mesma request. Logo, ao utilizar eager loading, todas as informações são trazidas, independente se vamos usá-las ou não. Este modo é útil para cenários em que sabemos, já de antemão, que sempre vamos precisar de todos os dados das entidades envolvidas.

Antes de prosseguirmos, vamos alterar o schema do banco de dados para que as tabelas tenham uma relação 1:N. Para isso, utilizaremos os seeders já criados.

Abra o arquivo [timestamp]-employees.js dentro da pasta seeders, apague tudo que havíamos colocado antes e copie o código abaixo:

Copiar
// src/seeders/[timestamp]-employees.js

module.exports = {
  up: async (queryInterface, _Sequelize) => {
    return queryInterface.bulkInsert('employees',
      [
        { first_name: 'Marcos', last_name: 'Zuck', age: 49 },
        { first_name: 'Fred', last_name: 'Mercurio', age: 19 },
        { first_name: 'Ayrton', last_name: 'Keno', age: 51 },
        { first_name: 'Robin', last_name: 'Mathias', age: 63 },
        { first_name: 'Antonio', last_name: 'Augusto', age: 18 },
      ],
      {},
    );
  },

  down: async (queryInterface, _Sequelize) => {
    return queryInterface.bulkDelete('employees', null, {});
  },
};
Depois, abra o arquivo [timestamp]-addresses.js dentro da pasta seeders, limpe-o e copie o código abaixo:

Copiar
// src/seeders/[timestamp]-addresses.js

module.exports = {
  up: async (queryInterface, _Sequelize) => {
    return queryInterface.bulkInsert('addresses',
      [
        {
          city: 'Belo Horizonte',
          street: 'Rua Florida',
          number: 1080,
          employee_id: 1,
        },
        {
          city: 'São Paulo',
          street: 'Avenida Paulista',
          number: 1980,
          employee_id: 2,
        },
        {
          city: 'Fortaleza',
          street: 'Rua das Enseadas',
          number: 95,
          employee_id: 3,
        },
        {
          city: 'Belo Horizonte',
          street: 'Rua Andaluzita',
          number: 131,
          employee_id: 4,
        },
        {
          city: 'Belo Horizonte',
          street: 'Rua Vicente Alvarenga',
          number: 80,
          employee_id: 1,
        },
        {
          city: 'Curitiba',
          street: 'Rua Fria',
          number: 101,
          employee_id: 5,
        },
      ],
      {},
    );
  },

  down: async (queryInterface, _Sequelize) => {
    return queryInterface.bulkDelete('addresses', null, {});
  },
};
Finalmente, utilize o comando abaixo para remover as tabelas antigas, depois recriá-las e, por último, executar os seeders:

Copiar
npx sequelize db:migrate:undo:all
npx sequelize db:migrate
npx sequelize db:seed:all
Agora, vamos ver como utilizar o Eager loading na prática. Vamos voltar ao arquivo src/app.js e criar mais uma rota:

Copiar
// src/app.js

// const express = require('express');
// const employee = require('./controllers/employee.controller');

// const app = express();

// app.use(express.json());

app.get('/employees/:id', employee.getById);
// app.get('/employees', employee.getAll);

// module.exports = app;
Com a nova rota já adicionada, vamos voltar ao arquivo src/controllers/employee.controller.js e adicionar o método getById:

Copiar
// src/controllers/employee.controller.js

// const EmployeeService = require('../services/employee.service');

// const getAll = async (_req, res) => {
//   ...
// };

const getById = async (req, res) => {
  try {
    const { id } = req.params;
    const employee = await EmployeeService.getById(id);

    if (!employee) {
      return res.status(404).json({ message: 'Pessoa colaboradora não encontrada' });
    }

    return res.status(200).json(employee);
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: 'Ocorreu um erro' });
  };
}

// module.exports = {
//   getAll,
  getById
// };
Por fim, criaremos o método getById, agora no arquivo src/services/employee.service.js

Copiar
// src/services/employee.service.js

// const { Address, Employee } = require('../models/');

// const getAll = async () => {
//   ...
// };

const getById = async (id) => {
  const employee = await Employee.findOne({
      where: { id },
      include: [{ model: Address, as: 'addresses' }],
    });
  return employee;
}

// module.exports = {
//   getAll,
  getById
// };
Agora, faça uma requisição do tipo GET para o endpoint http://localhost:3001/employees/1 e veja como o resultado é retornado.

Além das propriedades que já citamos, o campo include pode manipular os dados que serão retornados. Por exemplo, se não quisermos o acesso ao número do endereço, bastaria alterar o código, adicionando a propriedade attributes e dentro dela o que queremos fazer:

Copiar
// src/services/employee.service.js

// ...

// const getAll = async () => {
//   ...
// };

// const getById = async (id) => {
//   const employee = await Employee.findOne({
//       where: { id },
       include: [{
         model: Address, as: 'addresses', attributes: { exclude: ['number'] },
       }],
//   });
//   return employee;
// }

// ...
Dessa maneira, o campo number será excluído do retorno da requisição.