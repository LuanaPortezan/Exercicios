O que √© o JWT?
Vamos come√ßar assistindo a um v√≠deo:


Interessante, n√©? O JWT (JSON Web Token) √© um token gerado a partir de dados ‚Äúpessoais‚Äù que pode ser trafegado pela internet ao fazer requisi√ß√µes para APIs e afins. Mas aten√ß√£o: toda a informa√ß√£o que colocamos no JWT √© p√∫blica e qualquer pessoa com o token consegue ler essas informa√ß√µes. O mecanismo de seguran√ßa do JWT permite, no entanto, que apenas quem tem a senha consiga alterar as informa√ß√µes contidas em um token.

A coisa toda funciona assim:

O navegador solicita que o usu√°rio digite seu login e senha.
O navegador ent√£o envia esse login e senha ao servidor, para verificar que esses dados est√£o corretos.
Uma vez que valida login e senha, o servidor cria dois objetos: um contendo informa√ß√µes sobre o token que ser√° gerado, que chamamos de header, e outro contendo os dados do usu√°rio e as permiss√µes que aquela pessoa tem, ao qual chamamos de payload.
O servidor, ent√£o, converte esses dois objetos em JSON, junta-os em uma mesma string e utiliza um algoritmo chamado HMAC para ‚Äúcriptografar‚Äù essa string usando um ‚Äúsegredo‚Äù que s√≥ ele sabe, gerando o que chamamos de assinatura ‚Äì que nada mais √© do que header + payload criptografados.
Por fim, o servidor combina o header, o payload originais e a assinatura, criando assim o token.
O token √© enviado ao cliente, que o armazena para utiliz√°-lo nas pr√≥ximas requisi√ß√µes.
Chamamos de autentica√ß√£o o processo pelo qual a pessoa usu√°ria consegue, utilizando informa√ß√µes confidenciais como email e senha, efetuar login com sucesso em uma aplica√ß√£o, tendo como retorno um JSON Web Token que possibilita acessar suas permiss√µes de navega√ß√£o.

Autorizacao de acesso o que e jwt
Autoriza√ß√£o de acesso
Na pr√≥xima requisi√ß√£o:

O navegador envia ao servidor os dados para, por exemplo, cadastrar um novo produto. Juntamente a esses dados, o navegador envia o token que recebeu ao realizar o login.
Quando recebe os dados, a primeira coisa que o servidor faz √© obter o header e o payload do token e criptograf√°-los, gerando, mais uma vez, a assinatura.
O servidor, ent√£o, compara a nova assinatura com a assinatura que foi enviada pelo cliente. Se ambas forem iguais, quer dizer que o conte√∫do do header e do payload n√£o foram modificados desde o login.
Agora que j√° sabe que o token √© v√°lido, o servidor continua processando a requisi√ß√£o e, por fim, entrega a resposta para o cliente.
O JWT tamb√©m √© usado para autoriza√ß√£o, quando precisamos fazer o processo de atestar as permiss√µes de uma pessoa usu√°ria que deseja acessar uma rota ou recurso protegido. Isso exige o envio do token, normalmente no header Authorization, a partir do qual s√£o acessadas as informa√ß√µes necess√°rias para a verifica√ß√£o.

Confirmacao de insercao o que e jwt
Confirma√ß√£o de inser√ß√£o
Mas o que acontece se, antes de tentar cadastrar um produto, a pessoa que est√° usando nossa aplica√ß√£o tentar alterar o token?

Suponha que o payload do token possui uma propriedade chamada admin e que, no token da pessoa em quest√£o, possui o valor false. A pessoa, a fim de tentar obter privil√©gios de administradora indevidamente, altera o payload, setando o valor de admin para true. Ela ent√£o armazena esse token modificado na aplica√ß√£o e tenta cadastrar um produto. Nesse caso, o que acontece do lado do servidor?

üí° Antes de continuar a leitura, tente descrever o processo que acontece no lado do servidor.

Acontece o seguinte:

A pessoa cliente envia para o servidor as informa√ß√µes do produto e o token modificado.
O servidor extrai o payload e header do token e, utilizando essas duas informa√ß√µes, gera uma assinatura.
Ao comparar a assinatura nova com a assinatura enviada pela pessoa cliente, o servidor percebe que h√° uma diferen√ßa! Isso acontece porque criptografar { "admin": false } sempre vai gerar um resultado (uma assinatura, nesse caso) diferente de criptografar { "admin": true }.
Como a assinatura √© diferente, o servidor rejeita a requisi√ß√£o, devolvendo um status de erro com uma mensagem informando que o token √© inv√°lido.
Confirma√ß√£o de insercao o que e jwt fluxo
Confirma√ß√£o de inser√ß√£o
A partir disso, podemos concluir que a autentica√ß√£o sempre vem antes da autoriza√ß√£o.

Perceba que, para que a pessoa usu√°ria consiga alterar o seu token e obter privil√©gios a mais, ela precisaria gerar uma nova assinatura. Acontece que, para gerar uma nova assinatura, √© necess√°rio possuir o segredo, que apenas o servidor possui. Sendo assim, √© virtualmente imposs√≠vel adulterar um token JWT, o que torna essa tecnologia muito confi√°vel para tratar de autentica√ß√£o.

‚ö†Ô∏è Aviso: Note que autentica√ß√£o e autoriza√ß√£o s√£o coisas diferentes.

Autentica√ß√£o √© utilizada para verificar sua identidade, realizada por meio de informa√ß√µes confidenciais como email e senha.
Autoriza√ß√£o verifica as permiss√µes de uma pessoa para acessar ou executar determinadas opera√ß√µes.
Abaixo vamos explicar mais sobre o HMAC e a criptografia envolvida no processo. Mas n√£o se assuste: n√£o vamos implementar nada disso na m√£o. Tudo est√° encapsulado nas bibliotecas do JWT.

O que √© HMAC?
O HMAC √© um algoritmo para gerar um MAC (c√≥digo de autentica√ß√£o de mensagem) criptografado atrav√©s de algum algoritmo de hash (algoritmos que codificam mensagens), como md5, sha1 ou sha256, a partir de uma chave secreta (uma senha) e de uma mensagem qualquer.

Por exemplo, se gerarmos o HMAC da mensagem ‚ÄúOl√°, tudo bem?‚Äù, com o segredo ‚ÄúminhaSenha‚Äù e o algoritmo sha1, teremos o seguinte resultado: b88651e71c7c757560722b52e5f1ead754a759d8. No entanto, se alterarmos o texto para ‚Äúol√°, tudo bem?‚Äù, mudando apenas a capitaliza√ß√£o da primeira letra, o resultado passa a ser ac7016fd2014ca9a79ac2e3ef16b6bd857f91f7a.

Agora, imagine que ao inv√©s de ‚ÄúOl√°, tudo bem?‚Äù fa√ßamos isso com o payload do nosso token. Ao mudar qualquer m√≠nimo detalhe das informa√ß√µes daquele token, a assinatura se torna inv√°lida.

üí°Curiosidade: A f√≥rmula do HMAC √© a seguinte:

HMAC(K, m) = hash(K1 + hash(K2 + m))

onde:

K √© a chave secreta;

m √© a mensagem;

hash √© a fun√ß√£o de hash escolhida (md5, sha1 etc);

K1 e K2 s√£o chaves secretas derivadas da chave original K;

+ √© a opera√ß√£o de concatena√ß√£o de strings.