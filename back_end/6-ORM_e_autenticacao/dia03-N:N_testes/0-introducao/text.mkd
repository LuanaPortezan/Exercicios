Introdu√ß√£o
O que vamos aprender?
J√° vimos como o Sequelize pode ser usado para modelar as rela√ß√µes entre tabelas, permitindo trabalhar dados relacionados no banco de dados do conforto do Javascript.

Hoje vamos focar na modelagem de rela√ß√µes N:N ou muitos-para-muitos, com tabelas intermedi√°rias. Al√©m disso vamos ver como transa√ß√µes nos permitem preservar a integridade dos dados no banco, revertendo opera√ß√µes que n√£o puderam ser realizadas at√© o final.
Voc√™ ser√° capaz de:
Utilizar o conceito de transa√ß√µes para realizar opera√ß√µes at√¥micas no banco de dados com sequelize;

Utilizar o sequelize para criar relacionamento N:N entre tabelas;

Por que isso √© importante?
N√≥s estudamos anteriormente como podemos utilizar o Sequelize para expressar relacionamentos do tipo 1:1 e 1:N em nossas aplica√ß√µes. Mas existe outro tipo de relacionamento entre tabelas que √© muito importante e que ocorre com bastante frequ√™ncia quando estamos desenvolvendo aplica√ß√µes Web que utilizam banco de dados, o relacionamento N:N. üòç

Existem situa√ß√µes em que queremos alcan√ßar um determinado objetivo em nossa aplica√ß√£o que envolvem executar um conjunto de opera√ß√µes em nosso banco de dados de forma at√¥mica. A esta situa√ß√£o damos o nome de transa√ß√£o e √© muito comum utiliz√°-la no desenvolvimento de software que envolve banco de dados. üíö

Vamos que vamos! üöÄ