Bônus: Testes
⚠️ Esta é uma parte extra do conteúdo, ou seja, não é necessário compreender o que está aqui para prosseguir com os exercícios e aula ao vivo do dia.

⚠️ O desenvolvimento dos testes neste tópico, utiliza como base o código utilizado na lição de Transações, por isso, testaremos apenas a rota de /employees.

Para manter o hábito, vamos testar nossa transação! É importante acentuar que, em um contexto onde não pretendemos testar isoladamente nossas camadas, ou seja, já testamos nossos models, controllers e services, então iremos trabalhar nos testes de integração, aqui especificamente, pensando no contrato da requisição.

Antes de começar a realizar os testes, vamos instalar nossas dependências de desenvolvimento:

Copiar
npm i mocha@10.0.0 chai@4.3.4 chai-http@4.3.0 sinon@14.0.0 -D -E
Vamos alterar a linha abaixo em nosso package.json para executar nossos testes com o comando npm test, como nas aulas anteriores. Só que, nesse caso, passando uma variável de ambiente, a qual explicaremos adiante.

Copiar
"scripts": {
  ...
  "test": "NODE_ENV=test mocha ./tests/**/*$NAME*.test.js --exit"
},
Note que estaremos fazendo um teste de integração que pressupõe um comportamento no banco de dados através do consumo da API. Ou seja, um teste que, após o consumo da API, espera um resultado que pode ser validado através da leitura do banco de dados via própria API. Por isso, precisamos isolar um banco de dados no mesmo modelo do anterior. Esse banco não deve gerar prejuízo ao seu ambiente de desenvolvimento e tampouco para seu ambiente de produção.

Por isso, além de colocarmos a variável de ambiente NODE_ENV=test na frente dos scripts nós também configuramos nosso sequelize na transação assim:

Copiar
// src/services/employee.service.js
// ... 
const Sequelize = require('sequelize');
const config = require('../config/config');

const env = process.env.NODE_ENV || 'development';
// Ajustamos para usar a configuração correta para nosso ambiente
const sequelize = new Sequelize(config[env]);
// ...
Que é análogo ao que o src/models/index.js faz para os models, veja só:

Copiar
// ...
// const path = require('path');
// const Sequelize = require('sequelize');
// const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.js')[env];
// const db = {};

// let sequelize;
// if (config.use_env_variable) {
//   sequelize = new Sequelize(process.env[config.use_env_variable], config);
// } else {
//   sequelize = new Sequelize(config.database, config.username, config.password, config);
// } 

//...
Para inicializar o banco de teste, execute os seguintes comandos, passando a variável de ambiente que deseja usar (no nosso caso, NODE_ENV=test):

Copiar
NODE_ENV=test npx sequelize-cli db:create
NODE_ENV=test npx sequelize-cli db:migrate
NODE_ENV=test npx sequelize-cli db:seed:all
Caso queira remover o banco para começar novamente, utilize:

Copiar
NODE_ENV=test npx sequelize-cli db:drop
Agora, na raiz do seu projeto, crie uma pasta ./tests/integration e um arquivo employeeCreation.test.js, onde testaremos a criação de Employees. No nosso teste, considerando o exemplo que acabamos de ver, vamos assumir o seguinte teste de mesa:

Copiar
### Testando a rota POST /employees

- Acessarei meu `rest-client` (Thunder Client)
  - Para um caso de sucesso:
    - Farei uma requisição `POST` com os dados corretos para meu
      end-point `/employee`;
    - Aguardo uma resposta com status `201 - Created`;
    - Essa resposta deve conter também um atributo `id`, no corpo;
    - Essa resposta deve conter também um atributo `message`,
      no corpo, com a mensagem `Cadastrado com sucesso`;
    - Farei uma requisição `GET` utilizando esse `id` para meu
      end-point `/employee/:id`;
    - Aguardo uma resposta com status `200 - OK`;
    - Essa resposta deve conter também um atributo `addresses`,
      no corpo, com pelo menos um item.
  - Para um caso de falha:
    - Farei uma requisição `POST` com os dados incorretos para meu
      end-point `/employee`;
    - Aguardo uma resposta com status `500 - Internal Server Error`;
    - Essa resposta deve conter também um atributo `message`,
      no corpo, com a mensagem `Algo deu errado`;
Dessa forma, podemos criar o seguinte teste:

Copiar
// ./tests/integration/employeeCreation.test.js

const chai = require('chai');
const { stub } = require('sinon');
const chaiHttp = require('chai-http');

chai.use(chaiHttp);

const { expect } = chai;

const app = require('../../src/app');

// omitir os `console.log`s dos testes gerando um `stub` pra função
const consoleLogStub = stub(console, 'log');
before(() => consoleLogStub.returns(true));
after(() => consoleLogStub.restore());

describe('Rota POST /employees', () => {
  describe('quando os dados do `body` são válidos', () => {
    let postEmployee;
    let getEmployee;

    before(async () => {
      try {
        postEmployee = await chai.request(app)
          .post('/employees')
          .send({
            firstName: 'Rodrigo',
            lastName: 'Oliveira',
            age: 30,
            city: 'TrybeCity',
            street: 'Rua Teste',
            number: 42,
          });

        const { body : { id } } = postEmployee;

        getEmployee = await chai.request(app)
          .get(`/employees/${id}`);
      } catch (error) {
        console.error(error.message);
      }
    });

    it('retorna 201 - Created', async () => {
      const { status } = postEmployee;

      expect(status).to.be.equals(201);
    });

    it('retorna um atributo `id`, que é um número', async () => {
      const { body: { id } } = postEmployee;

      expect(typeof id).to.be.equals('number');
    });

    it('retorna uma mensagem `Cadastrado com sucesso`', async () => {
      const { body: { message } } = postEmployee;

      expect(message).to.be.equals('Cadastrado com sucesso');
    });

    it('é possível consultar a pessoa criada através do `id` retornado', async () => {
      const { body: { id: postId } } = postEmployee;
      const { body: { id: getId } } = getEmployee;

      expect(postId).to.be.equals(getId);
    });

    it('essa consulta também retornou um atributo `addresses`, com pelo menos um item', async () => {
      const { body: { addresses } } = getEmployee;

      expect(addresses.length).to.be.greaterThanOrEqual(1);
    });
  });

  describe('quando os dados do `body` não são válidos', () => {
    let postEmployee;

    before(async () => {
      try {
        // removendo city
        postEmployee = await chai.request(app)
          .post('/employees')
          .send({
            firstName: 'Rodrigo',
            lastName: 'Oliveira',
            age: 30,
            street: 'Rua Teste',
            number: 42,
          });
      } catch (error) {
        console.error(error.message);
      }
    });

    it('retorna 500 - Internal Server Error', async () => {
      const { status } = postEmployee;

      expect(status).to.be.equals(500);
    });

    it('retorna uma mensagem `Ocorreu um erro`', async () => {
      const { body: { message } } = postEmployee;

      expect(message).to.be.equals('Ocorreu um erro');
    });
  });
});
Para testar, utilize npm test. Não se esqueça que a API não deve estar rodando no momento do test (o próprio chai-http subirá sua api).

Se tudo correr bem, seus testes devem passar sem problemas!