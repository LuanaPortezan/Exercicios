Quando queremos importar um módulo local, precisamos passar para o require o caminho do módulo, seguindo a mesma assinatura.

Por exemplo: require('./meuModulo'). Note que a extensão (.js) não é necessária. Por padrão, o Node já procura por arquivos terminados em .js ou .json e os considera como módulos.
Além de importarmos um arquivo como módulo, podemos importar uma pasta. Isso é útil, pois muitas vezes um módulo está dividido em vários arquivos, porém, desejamos importar todas as suas funcionalidades de uma única vez. Nesse caso, a pasta precisa conter um arquivo chamado index.js, o qual importa cada um dos arquivos do módulo e os exporta da forma mais conveniente.

Por exemplo:

Copiar
// meuModulo/funcionalidade-1.js

module.exports = function () {
  console.log('funcionalidade1');
}
Copiar
// meuModulo/funcionalidade-2.js

module.exports = function () {
  console.log('funcionalidade2');
}
Copiar
// meuModulo/index.js
const funcionalidade1 = require('./funcionalidade-1');
const funcionalidade2 = require('./funcionalidade-2');

module.exports = { funcionalidade1, funcionalidade2 };
No exemplo acima, quando importarmos o módulo meuModulo, teremos um objeto contendo duas propriedades, as quais são as funcionalidades que exportamos dentro de meuModulo/index.js.

Para importarmos e utilizarmos o módulo meuModulo, basta passar o caminho da pasta como argumento para a função require, desse modo:

Copiar
// minha-aplicacao/index.js
const meuModulo = require('./meuModulo');

console.log(meuModulo); // { funcionalidade1: [Function: funcionalidade1], funcionalidade2: [Function: funcionalidade2] }

meuModulo.funcionalidade1();
