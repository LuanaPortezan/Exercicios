// Uma fun√ß√£o async retorna uma promise, tal como o exemplo abaixo:
// function dividirNumeros(num1, num2) {
//   const promise = new Promise((resolve, reject) => {
//     if (num2 == 0) 
//       reject(new Error("N√£o pode ser feito uma divis√£o por zero"));

//     const resultado = num1 / num2;
//     resolve(resultado)
//   });

//   return promise;
// }

// const doSomething = async () => {
//   console.log(await dividirNumeros(2,2));
// };
// Anota a√≠ üñä: Toda fun√ß√£o na qual utilizamos async, passa automaticamente a retornar uma Promise, que ser√° rejeitada em caso de erro, e resolvida em caso de sucesso.

const promiseParaFazerAlgumaCoisa = () => {
  return new Promise(resolve => {
    setTimeout(() => resolve('Eu fiz alguma coisa'), 2000)
  })
}

const assistirAlguemFazendoAlgumaCoisa = async () => {
  const something = await promiseParaFazerAlgumaCoisa()
  return something + '\n e Eu vi voc√™ fazendo'
}

const AssistirAlguemAssistindoAlguemFazendoAlgumaCoisa = async () => {
  const something = await assistirAlguemFazendoAlgumaCoisa()
  return something + '\n e Eu tamb√©m vi voc√™ vendo ele fazendo'
}

AssistirAlguemAssistindoAlguemFazendoAlgumaCoisa().then(res => {
  console.log(res)
})

// A fun√ß√£o setTimeout() est√° sendo utilizada apenas para simular uma opera√ß√£o que ir√° demorar, neste caso, dois segundos para ser conclu√≠da. Se quiser conhecer um pouco mais sobre essa fun√ß√£o, veja a documenta√ß√£o.