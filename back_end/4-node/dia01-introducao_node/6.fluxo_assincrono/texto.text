Agora que voc√™ j√° conhece um pouco sobre Node, vamos relembrar um conceito importante e que precisa estar bem consolidado: assincronicidade!

Relembrandoüß†: Assim como no front-end, as opera√ß√µes ass√≠ncronas s√£o essenciais para as rotinas do back-end. Essas opera√ß√µes permitem que tarefas independentes sejam executadas em segundo plano, sem que o fluxo de execu√ß√£o aguarde pela finaliza√ß√£o dessas tarefas. Essa pr√°tica contribui, principalmente, para tarefas que demandam maior tempo de execu√ß√£o.

Existem duas formas principais para implementarmos c√≥digo ass√≠ncrono em JavaScript, usando Callbacks e Promises.

As Callbacks fornecem uma interface com a qual voc√™ pode dizer: ‚Äúe quando terminar de fazer isso, fa√ßa aquilo‚Äù. Al√©m de evitar uma espera desnecess√°ria, essa opera√ß√£o permite que outras opera√ß√µes bloqueantes tamb√©m sejam executadas ao mesmo tempo. 

Apesar das Callbacks tornarem nosso c√≥digo muito mais eficiente, elas tamb√©m trazem alguns desafios para legibilidade do nosso c√≥digo. O uso aninhado dessas fun√ß√µes pode dificultar a legibilidade do seu c√≥digo, o Callback Hell. Para resolver o problema da chamada Callback Hell, podemos utilizar as Promises. Elas foram introduzidas ao JavaScript como estrat√©gia para melhorar a legibilidade do c√≥digo, basicamente uma forma de resolver a ‚Äúbagun√ßa‚Äù que as callbacks causavam. Quando usamos Promises, ainda estamos utilizando um tipo de callback, mas que possui uma interface mais leg√≠vel e intuitiva.

Em JavaScript, as Promises: uma promessa/fun√ß√£o √© criada e, dentro dela, existe um c√≥digo/a√ß√£o a ser executado. Se o c√≥digo √© executado sem nenhum problema, a Promise √© resolvida por meio da fun√ß√£o resolve; se algo de errado acontecer durante a execu√ß√£o, a Promise √© rejeitada por meio da fun√ß√£o reject.

Uma promise pode se tornar resolvida com um valor ou rejeitada por algum motivo. Caso um estado de erro ocorra, o m√©todo catch do Promise √© chamado. Esse m√©todo, por sua vez, chama o m√©todo de tratamento associado ao estado rejected. Caso o then ocorra, ele chama o m√©todo resolved.