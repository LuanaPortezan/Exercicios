// src/experimento-json.js

// --------------- Interpretando conte√∫do JSON com express.json ---------------

// src/app.js

const express = require('express');
const app = express();

app.post('/fail', (req, res) => {
  res.status(200).json({ greeting: `Hello, ${req.body.nome}!` });
});

app.use(express.json());

app.post('/hello', (req, res) => {
  res.status(200).json({ greeting: `Hello, ${req.body.nome}!` }); // req.body agora est√° dispon√≠vel
});

app.listen(3000, () => { console.log('Ouvindo na porta 3000'); });

// Um middleware bastante utilizado √© o express.json, ele √© um middleware que l√™ o conte√∫do da requisi√ß√£o HTTP, interpreta os conte√∫dos como JSON e cria no objeto req uma propriedade body com o valor encontrado no conte√∫do.

// A fun√ß√£o express.json() utilizada na linha app.use(express.json()) cria um middleware que processa corpos de requisi√ß√µes escritos em JSON. Se executarmos nossa API e fizermos uma requisi√ß√£o do tipo POST, conseguiremos ter acesso aos valores enviados no body da requisi√ß√£o. Por√©m, se tirarmos o uso deste middleware, voc√™ perceber√° que as requisi√ß√µes do tipo POST n√£o conseguem processar os dados enviados no body da requisi√ß√£o.

// Fa√ßa o teste: copie o script abaixo, cole-o em um arquivo chamado src/experimento-json.js e execute-o com o comando node src/experimento-json.js. Em seguida, realize a request POST localhost:3000/hello, passando o JSON { "nome": "<seu nome aqui">" }.

//üí° Experimente agora realizar a request POST localhost:3000/fail, passando o JSON { "nome": "<seu nome aqui">" }. Perceba que, sem o express.json, req.body fica undefined e voc√™ ver√° um erro.