Interfaces versus Classes
Interfaces e (super)classes podem servir para especificar o comportamento de classes, mas de formas e em n√≠veis distintos.

Quando utilizamos interfaces, queremos garantir que alguns atributos e m√©todos existam, sem se importar com o que fazem. √â mais um ‚Äúme arranja alguma entidade que tenha o m√©todo x, pois eu vou precisar chamar x, e se ele n√£o existir vai dar erro‚Äù.

J√° quando utilizamos a heran√ßa, disponibilizamos n√£o s√≥ um contrato, mas uma base j√° implementada de c√≥digo que funciona, de forma que apenas vamos especializar esta base de c√≥digo adicionando novas funcionalidades.

Existe uma forma de criar classes que precisam obrigatoriamente implementar alguns m√©todos em espec√≠fico, as chamadas classes abstratas, que voc√™ conhecer√° na pr√≥xima aula üòâ.

Resumindo, quando a classe A implementa a interface I, ela deve implementar todos os m√©todos declarados em I e possuir todos os atributos de I. Quando a classe A herda da classe B, ela j√° herda todos os m√©todos e atributos p√∫blicos ou protegidos implementados na classe B.

Na imagem abaixo, perceba a diferen√ßa entre interfaces e classes, quando a classe Student implementa a interface IPerson, ela deve implementar e possuir todos os m√©todos e atributos dessa interface. Quando as classes Teacher e Player herdam da classe Person, elas j√° herdam todos os m√©todos e atributos p√∫blicos ou protegidos implementados na classe Person.

interface e classes uml
Ilustra√ß√£o demonstrando a diferen√ßa de implementa√ß√£o entre interface e classe