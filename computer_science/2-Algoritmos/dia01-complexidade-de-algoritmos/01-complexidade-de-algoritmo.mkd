# O que vamos aprender?

    ‚ÄúQu√£o eficiente √© esse algoritmo?‚Äù

Essa pergunta talvez j√° tenha passado pela sua cabe√ßa ao olhar para os c√≥digos que desenvolveu. E √© natural que seja assim, pois a efici√™ncia de um algoritmo √© um dos principais requisitos n√£o funcionais listados em levantamentos de requisitos, tanto por clientes quanto por membros das equipes de desenvolvimento.

Uma pessoa usu√°ria de um site n√£o quer que sua busca por determinada informa√ß√£o demore muito tempo para trazer um retorno. Por exemplo, n√£o √© frustrante quando algum programa causa lentid√£o √† nossa m√°quina em fun√ß√£o da quantidade de recursos que consome!? üò†

Entretanto, n√£o √© somente em experi√™ncia da pessoa usu√°ria que a efici√™ncia de um algoritmo se mostra importante. H√° diversos projetos e pesquisas cient√≠ficas que dependem, por exemplo, do processamento e armazenamento de bases enormes de dados, e que dependem de investimentos financeiros elevados.

Por esse motivo, √© fundamental que as pessoas desenvolvedoras sejam capazes de aumentar a efici√™ncia de seus algoritmos, reduzindo custos envolvidos e entregando a resolu√ß√£o de problemas.
Refer√™ncias bibliogr√°ficas da se√ß√£o

## Para esta se√ß√£o, a bibliografia tomada como refer√™ncia √©:

- Introduction to Algorithms, 3rd Edition (The MIT Press) por Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein;

- Entendendo Algoritmos: Um Guia Ilustrado Para Programadores e Outros Curiosos, 24 abril 2017 por Aditya Y. Bhargava;

- The Algorithm Design Manual, 6 novembro 2020 por Steven S. Skiena

## Voc√™ ser√° capaz de

- Descrever a capacidade de analisar o desempenho de um algoritmo como importante para processos seletivos de Big Techs, como Google, Amazon, Facebook, etc.

- Definir o que √© algoritmo;

- Definir o que √© um algoritmo correto;

- Compreender a import√¢ncia da an√°lise de algoritmos;

- Definir Ordem de Complexidade, ou Complexidade Assint√≥tica;

- Compreender as nota√ß√µes que representam a complexidade de um algoritmo, a saber: O(1), O(n), O(log n), O(n^2), O(n^3) e O(n!);

- Definir Complexidade de Tempo e Complexidade de Espa√ßo;

- Definir a categoria de problemas NP-Completo;

- Combinar fun√ß√µes matem√°ticas para analisar complexidade de algoritmos;

- Definir o melhor, o pior e o caso m√©dio de uma Ordem de Complexidade.

## Por que isso √© importante?

Em geral, para fun√ß√µes com um valor de entrada pequeno, n√£o costumamos nos importar com a efici√™ncia do algoritmo.

Entretanto, quando nossa fun√ß√£o tiver que lidar com valores de entrada muito grandes, por exemplo: mil valores ao mesmo tempo? Ou quem sabe milh√µes de valores? Nesses casos, a efici√™ncia do que estamos fazendo tornar-se importante e n√≥s, pessoas desenvolvedoras, precisamos ser capazes de lidar com esses cen√°rios!

‚ö†Ô∏è Aviso: Embora pare√ßa que estamos falando de quantidades irreais, h√° uma s√©rie de exemplos que comprovam que problemas gerados por entradas de dados grandiosas s√£o bastante comuns.

O famoso Discord, por exemplo, j√° enfrentou a demanda de ordenar alfabeticamente uma lista de amigos com at√© 250.000 pessoas. E voc√™ sabe o tempo m√°ximo que o algoritmo tinha pra rodar? Menos de um segundo e meio! Um desafio e tanto que p√¥de ser solucionado com o conhecimento sobre Algoritmos.

De olho na dica üëÄ: Esse conhecimento √© t√£o importante no mundo da tecnologia, que as famosas Big Techs como: Google, Amazon e Facebook, fazem processos seletivos nos quais a capacidade de fazer esse tipo de an√°lise √© obrigat√≥ria.

Em suma, quando cresce a escala, esse conhecimento se torna essencial. E com esse conhecimento voc√™ vai perceber a exist√™ncia de certos tipos de problemas que ainda n√£o t√™m solu√ß√£o, mesmo reunindo toda a capacidade computacional do planeta.

‚ö†Ô∏è Aviso: Parece exagero? Mas acredite, n√£o √©. Vamos seguir para o conte√∫do e isso ficar√° mais n√≠tido para voc√™. üôÇ


# O que √© um algoritmo?

Uma vez que usamos essa palavra com frequ√™ncia, √© preciso que tenhamos a defini√ß√£o bem n√≠tida para esse conceito, de modo a garantir que estamos partindo do mesmo ponto quando falamos de Complexidade Algor√≠tmica.

‚ÄúInformalmente, um algoritmo √© qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como sa√≠da. Portanto, um algoritmo √© uma sequ√™ncia de etapas computacionais que transformam a entrada na sa√≠da‚Äù (CLRS - Introduction to Algorithms)

‚ÄúUm algoritmo √© um conjunto de instru√ß√µes que realizam uma tarefa.‚Äù (BHARGAVA, ADITYA Y. - Entendendo Algoritmos)

Basicamente, um algoritmo √© uma sequ√™ncia l√≥gica de passos bem definida (entrada, processamento e sa√≠da) que realiza determinada tarefa.

Pode parecer que usamos algoritmos somente para resolver problemas computacionais, entretanto, tamb√©m os utilizamos no nosso dia a dia! Observe alguns exemplos a seguir:

    Se vestir;
    Assar um bolo;
    Preparar um sandu√≠che;
    Trocar uma l√¢mpada;

Vejamos na anima√ß√£o abaixo como seria um exemplo de algoritmo para se vestir:

Pois bem! Apesar de existirem diversas formas de realizarmos uma tarefa, nem sempre a forma que escolhemos nos retornar√° o resultado esperado. Com isso, um algoritmo pode ou n√£o ser correto, podemos consider√°-lo correto se, e somente se, nos entrega a sa√≠da esperada para todas as entradas, isto √©, ele resolve aquele problema.

‚ö†Ô∏è Aviso: Algoritmos incorretos n√£o t√™m o comportamento de resolver um problema, e s√£o utilizados apenas quando √© poss√≠vel controlar bem sua taxa de erro; algo que √© raro, entretanto devemos mencionar isso a t√≠tulo de conhecimento.

Agora que estamos na mesma p√°gina em rela√ß√£o aos conceitos de algoritmo e algoritmos corretos (ou corretude), vamos compreender o que √© a Complexidade Algor√≠tmica.

Para come√ßar, observe o algoritmo abaixo:

def sum_array(numbers):

    sum = 0

    for number in numbers:

        sum += number


    return sum

Anota a√≠ üñä: A fun√ß√£o sum_array recebe um array de n√∫meros, percorre-o e executa a soma de cada um de seus valores (number), retornando a soma de todos os n√∫meros pertencentes ao array.

    Voc√™ consegue imaginar quanto tempo esse c√≥digo vai demorar em sua execu√ß√£o?

    Resposta: ‚ÄúIsso depende de muitos fatores‚Äù. Afinal, o tempo de execu√ß√£o depende da m√°quina, do que est√° rodando nela, dos recursos etc. N√£o conseguimos dizer isso apenas ao olhar para o c√≥digo.

Por√©m, vamos supor que estamos falando de uma m√°quina padr√£o e sem mais nada rodando nela. Quanto tempo voc√™ imagina que o algoritmo vai demorar para executar? Um segundo? Dez segundos?

Temos mais um ‚Äúdepende‚Äù aqui, n√£o √© mesmo? O tempo de execu√ß√£o depende do tamanho do array passado por par√¢metro! Quanto maior o tamanho dele, mais tempo o algoritmo gastar√° em sua execu√ß√£o.

Dito isso, n√£o sabemos quanto tempo o algoritmo vai demorar para executar, pois vai depender de in√∫meros fatores que v√£o al√©m do nosso controle. Mas, uma coisa podemos afirmar: O tempo de execu√ß√£o dele √© proporcional ao tamanho do dado de entrada. Por exemplo:

# def sum_array(numbers):

  # ...


# Suponha que, para o array abaixo, o tempo de execu√ß√£o seja `n`

sum_array(array_com_dez_mil_numeros)


# Nesse caso, aqui o tempo de execu√ß√£o vai ser `10 * n`, ou `10n`, j√° que o array √© dez vezes maior que o anterior

sum_array(array_com_cem_mil_numeros)


# J√° esse √© dez mil vezes maior que o primeiro, ent√£o esse aqui executa em `100n`

sum_array(array_com_um_milh√£o_de_numeros)

Note que conforme aumentamos o valor da entrada, o tempo de execu√ß√£o do algoritmo aumenta proporcionalmente, de acordo com uma taxa.

√â isso que chamamos de complexidade: A taxa de crescimento do tempo de execu√ß√£o de um algoritmo; quanto maior √© essa taxa, maior √© seu tempo de execu√ß√£o e, portanto, maior sua complexidade.

No exemplo anterior, os valores de entrada podem variar, mas as propor√ß√µes n√£o: Um aumento no tamanho da entrada aumenta o tempo de execu√ß√£o na mesma propor√ß√£o.
Na medida em que o tamanho da entrada cresce, o tempo de execu√ß√£o cresce na mesma propor√ß√£o
Na medida em que o tamanho da entrada cresce, o tempo de execu√ß√£o cresce na mesma propor√ß√£o

Podemos dizer, em suma, que a Ordem de Complexidade nada mais √© do que a representa√ß√£o dessa propor√ß√£o (ou taxa) de crescimento. Dado que o algoritmo √© linearmente proporcional ao tempo de execu√ß√£o, dizemos que este √© um algoritmo linear.

Anota a√≠ üñä: A Ordem de Complexidade nada mais √© do que a representa√ß√£o dessa propor√ß√£o (ou taxa) de crescimento. Dado que o algoritmo √© linearmente proporcional ao tempo de execu√ß√£o, dizemos que este √© um algoritmo linear.

    A fun√ß√£o matem√°tica que representa uma rela√ß√£o linear √© f(n) = n e a nota√ß√£o de Ordem de Complexidade para representar a taxa de crescimento do tempo de execu√ß√£o de um algoritmo √© dada por O(n), onde o n representa a quantidade de opera√ß√µes que o algoritmo vai realizar.

‚ö†Ô∏è Aviso: A partir de agora, sempre que falarmos sobre a Ordem de Complexidade n√£o iremos nos referir ao tempo em segundos que um algoritmo leva para ser executado, mas sim a quantidade de opera√ß√µes que ele realiza. üôÇ

    A Ordem de Complexidade pode ser chamada, tamb√©m, de Complexidade Assint√≥tica.

