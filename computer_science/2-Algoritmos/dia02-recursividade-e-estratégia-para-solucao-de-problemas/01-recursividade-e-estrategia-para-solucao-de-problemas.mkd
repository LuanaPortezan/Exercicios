# Introdu√ß√£o
## O que vamos aprender?
Neste conte√∫do, vamos aprender o que √© recursividade, como desenvolver algoritmos recursivos e quando utiliz√°-los. Com essa t√©cnica, podemos resolver problemas complexos transformando-os em problemas menores combinados a poss√≠veis solu√ß√µes.

Refer√™ncias bibliogr√°ficas da se√ß√£o
Para esta se√ß√£o, a bibliografia tomada como refer√™ncia √©:

Introduction to Algorithms, 3rd Edition (The MIT Press) por Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein;

Entendendo Algoritmos: Um Guia Ilustrado Para Programadores e Outros Curiosos, 24 abril 2017 por Aditya Y. Bhargava;

The Algorithm Design Manual, 6 novembro 2020 por Steven S. Skiena.

## Voc√™ ser√° capaz de
Entender o conceito de recursividade;

Iniciar analises de algoritmos recursivos;

Come√ßar a resolver problemas de forma recursiva.

## Por que isso √© importante?
A recursividade desempenha um papel central na programa√ß√£o funcional e na ci√™ncia da computa√ß√£o. No paradigma funcional, por exemplo, a recursividade √© o mecanismo b√°sico para repeti√ß√µes. Al√©m disso, muitos algoritmos importantes usam a recurs√£o.

Com a recursividade, conseguimos solucionar alguns problemas de forma mais simplificada e harmoniosa, diminuindo assim a complexidade de escrita do c√≥digo.

Normalmente, a solu√ß√£o recursiva √© utilizada em situa√ß√µes nas quais o c√≥digo fica com complexidade baixa, se comparado ao c√≥digo da solu√ß√£o iterativa, para o mesmo problema.

‚ö†Ô∏è Aviso: Ao usarmos a recurs√£o, n√£o temos nenhum benef√≠cio quanto ao desempenho do programa. Ela √© mais utilizada para evidenciar a resposta.

De olho na dicaüëÄ: ‚ÄúOs loops podem elevar o desempenho do seu programa, enquanto a recurs√£o melhora o do seu programador. Escolha o que for mais importante para a sua situa√ß√£o.‚Äù

# Recursividade
## Defini√ß√£o de recursividade
Durante seu cotidiano enquanto pessoa programadora, ser√° demandado que voc√™ resolva problemas. Dito isso, podemos utilizar o m√©todo da recursividade para a resolu√ß√£o de problemas grandes.

Anota a√≠ üñä: Uma fun√ß√£o que chama a si mesma √© chamada de recursiva. O processo para executar tal fun√ß√£o recursiva √© chamado de recursividade.

Um problema submetido a uma solu√ß√£o recursiva, ser√° quebrado em subproblemas menores at√© chegar a tal ponto que torna-se poss√≠vel solucion√°-lo trivialmente. Podemos fazer a analogia com as chamadas bonecas russas, que dentro de si tem diversas outras bonecas, cada vez menores.

Boneca russa

# Leis da recurs√£o
Podemos perceber que a recursividade √© um excelente m√©todo para usarmos no dia a dia, entretanto, nada √© perfeito! Quando formos escrever um c√≥digo, temos que ter o cuidado para que n√£o haja um loop infinito.


Exemplo:

A fun√ß√£o countdown abaixo tem como objetivo fazer uma contagem regressiva partindo de n at√© zero.

Copiar
def countdown(n):
    print(n)
    countdown(n - 1)  # chamada recursiva

countdown(5)
Observe que dentro da implementa√ß√£o desta solu√ß√£o, a fun√ß√£o chama ela mesma.

Voc√™ pode estar se perguntando: ‚ÄúO que √© isso!? ‚Äú ü§î

Resposta: Isso √© uma chamada recursiva! Lembre-se que a recurs√£o √© quando uma fun√ß√£o chama ela mesma. Se voc√™ executar esse c√≥digo, ele ficar√° em loop infinito!

‚ö†Ô∏è Aviso: Caso tenha executado o c√≥digo anterior, aperte Ctrl+C para parar a execu√ß√£o.

Quando estamos escrevendo uma fun√ß√£o recursiva, precisamos informar nossa condi√ß√£o de parada ou caso base da recurs√£o. Nesse sentido, podemos separar uma fun√ß√£o recursiva em:

Caso base e Caso recursivo
O caso recursivo √© a chamada da pr√≥pria fun√ß√£o novamente.

Ent√£o, como seria a corre√ß√£o desse c√≥digo para que ele funcione de acordo com esperado?ü§î Observe a resposta abaixo:

Copiar
def countdown(n):
    if n == 0: # caso base
        print("FIM!")
    else:
        print(n)
        countdown(n - 1) # caso recursivo

countdown(5)
Pronto! Agora a fun√ß√£o funciona corretamente!

Anota a√≠ üñä:

Se n √© igual a 0, escreva ‚ÄúFIM!‚Äù

Se n n√£o for igual a 0, escreva n e chame a fun√ß√£o novamente com n - 1

Como vimos acima, n√£o podemos construir um c√≥digo recursivo sem validar algumas condi√ß√µes. Sendo assim, vamos a tr√™s leis importantes:

1) Um algoritmo recursivo deve ter um caso base: quando falamos de recurs√£o, devemos sempre lembrar do caso base, pois sem ele nosso algoritmo ficar√° executando infinitamente.

O caso base √© a condi√ß√£o de parada do algoritmo recursivo, ele √© o menor subproblema do problema, tornando-o poss√≠vel de resolver de forma direta/trivial;

2) Um algoritmo recursivo deve mudar o seu estado e se aproximar do caso base: ap√≥s o in√≠cio da execu√ß√£o de um algoritmo recursivo, a cada nova chamada a ele mesmo, o seu estado deve se aproximar progressivamente do caso base.

Vamos imaginar a seguinte situa√ß√£o: queremos criar um c√≥digo que ir√° printar n√∫meros a partir de 0 e terminar em 10. O caso base do algoritmo √© 10, pois √© onde nossa fun√ß√£o recursiva deve parar a execu√ß√£o. A primeira chamada a fun√ß√£o ter√° o n√∫mero 0 passado de par√¢metro. A cada nova chamada √† fun√ß√£o, nosso estado deve incrementar o valor 1 ao valor do estado anterior, at√© chegar ao n√∫mero 10. Logo, o valor do estado na primeira chamada ser√° 0, na segunda chamada ser√° 1, na terceira chamada ser√° 2, e assim por diante at√© chegar ao valor do caso base;

3) Um algoritmo recursivo deve chamar a si mesmo, recursivamente: Essa lei √© a pr√≥pria defini√ß√£o de recurs√£o.

Observe o gif abaixo que representa a recursividade muito bem! üê∂ ‚ûø

recursividade_exemplo
‚ö†Ô∏è Aviso: Para evitar vertigem, n√£o olhe muito para ele. ü§¢


## Entendendo recursividade e colocando em pr√°tica
Antes de vermos como acontece a ‚Äúm√°gica‚Äù da recursividade, vamos ver como costuma ser uma estrutura b√°sica de uma fun√ß√£o recursiva:

Copiar
Nome da fun√ß√£o e par√¢metro:
    Condi√ß√£o de parada

    Chamada de si mesma
Declaramos uma fun√ß√£o com um par√¢metro.
Dentro da fun√ß√£o criada, definimos qual √© a condi√ß√£o de parada da fun√ß√£o.
A condi√ß√£o de parada faz uma compara√ß√£o entre o valor da condi√ß√£o com o par√¢metro que a fun√ß√£o est√° recebendo. Caso a condi√ß√£o n√£o se satisfa√ßa, a fun√ß√£o √© chamada novamente com um novo par√¢metro. Caso contr√°rio a execu√ß√£o para na condi√ß√£o de parada.
Vamos ver como isso acontece na pr√°tica ? Mas antes, voc√™ se lembra das suas aulas de matem√°tica em que aprendeu sobre fatorial?

Voc√™ sabia que a fatorial √© uma fun√ß√£o recursiva? Vamos relembrar:

Fatorial de n √© o produto dos n√∫meros positivos consecutivos menores ou iguais a n.

Sua nota√ß√£o √©: n!

Sua defini√ß√£o:

0! = 1

n! = n x (n - 1) x (n - 2) ‚Ä¶ 2 x 1

Exemplo:

5! = 5 x 4 x 3 x 2 x 1 = 120

Certo! Agora que relembramos fatorial, vamos observar sua estrutura:

Se

5! = 5 x 4 x 3 x 2 x 1
e

4! = 4 x 3 x 2 x 1
Podemos reescrever 5! como 5! = 5 x 4!

Observando esse caso, vemos que a fun√ß√£o 5! possui uma chamada de outra fun√ß√£o fatorial dentro dela. Logo, temos uma recurs√£o!

Vamos escrever um c√≥digo para resolv√™-lo?

Copiar
def factorial(n):
    if n <= 1: # caso base
        return 1
    else:
        return n * factorial(n - 1) # caso recursivo
O c√≥digo acima funciona da seguinte maneira:

A fun√ß√£o se chama recursivamente at√© chegar no caso base onde n √© igual a 1.

Voc√™ pode estar se perguntando: ‚Äú Mas por qu√™?‚Äù ü§î

Resposta: lembra da defini√ß√£o de fatorial? 0! √© 1, certo? 1! tamb√©m ser√° 1. Ent√£o o tornaremos como caso base. Quando a fun√ß√£o chegar no caso base, ela retornar√° 1 para a chamada anterior e far√° a multiplica√ß√£o com o n daquele contexto, que nesse caso ser√° o 2. Em outras palavras, quando a chamada retornar da recurs√£o acontecer√° return 2 * 1. Esse valor tamb√©m ser√° retornado para a fun√ß√£o que o chamou e assim acontecer√° at√© que todos os casos sejam satisfeitos.

‚ö†Ô∏èAviso: No nosso pr√≥ximo t√≥pico, vamos falar √† respeito da pilha de chamadas. Nele, entenderemos melhor como isso acontece!

