// Parte I

// Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.
// üöÄ Se liga nesse foguete!

// Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
// Dica: Para a resolu√ß√£o dos exerc√≠cios voc√™ dever√° aplicar conceitos sobre arrays, principalmente utilizar o for.
// üöÄ Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.
// Copie o c√≥digo abaixo:

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//     console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
// }
// testingScope(true);

const testingScope1 = escopo => { 
  if (escopo === true) { 
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo!`;
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope1(true);


// üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.

    // const oddsAndEvens = [13, 3, 4, 10, 7, 2];

    // const sortOddsAndEvens = () => {

    // // Seu c√≥digo aqui.

    // };

    // console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ
    
    // const sortOddsAndEvens = (array) => {
    //   for (let index = 1; index < array.length; index += 1) {
    //     for (let secondIndex = 0; secondIndex < index; secondIndex += 1) {
    //       if (array[index] < array[secondIndex]) {
    //           let position = array[index];
    //           array[index] = array[secondIndex];
    //           array[secondIndex] = position;
    //         }
    //       }
    //     }
      
    //     return array;
    //   };
      
    //   console.log(sortOddsAndEvens(array));

    //   const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortArrayBonus = (array) => {
  const sortOddsAndEvens = array.sort((a, b) => a - b);
  return sortOddsAndEvens;
};

const sortedArrayBonus = sortArrayBonus(oddsAndEvens);
console.log(`Os n√∫meros ${sortedArrayBonus} se encontram ordenados de forma crescente!`);
      
// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.