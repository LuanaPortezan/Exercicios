------- O que s√£o componentes?
Componentes s√£o a base de toda aplica√ß√£o React. Eles nos permitem segmentar uma p√°gina web em blocos de c√≥digos independentes e reutiliz√°veis, al√©m de tornarem o ambiente de desenvolvimento um local mais organizado. Conceitualmente, componentes React s√£o fun√ß√µes ou classes JavaScript que podem aceitar par√¢metros, chamados de props (do ingl√™s properties), os quais retornam elementos React respons√°veis por determinarem o que ser√° renderizado na tela.

Existem duas maneiras de definirmos um componente:

1. Via fun√ß√£o:

<!-- function Greeting(props) {
  return (
    <h1>Hello, {props.name}</h1>
  );
}

export default Greeting; -->

2. Via classe:

<!-- import React from 'react';

class Greeting extends React.Component {
  render() {
    return (
      <h1>Hello, {this.props.name}</h1>
    );
  }
}

export default Greeting; -->

Apesar de ambos os m√©todos serem equivalentes, tanto a fun√ß√£o quanto a classe possuem recursos adicionais, os quais nos aprofundaremos em posteriormente.

Neste momento, acabamos de aprender os conceitos b√°sicos de um componente. Vamos refor√ßar cada um deles por meio do exemplo a seguir:

<!-- import React from 'react';

class Greeting extends React.Component {
  render() {
    return (
      <h1>Hello, {this.props.name}</h1>
    );
  }
}

export default Greeting; -->

Analisando o c√≥digo acima, temos:

1. A declara√ß√£o de um componente chamado Greeting;

2. O componente Greeting herda da classe Component da biblioteca react;

3. O componente Greeting descreve o que vai ser mostrado para quem usar a aplica√ß√£o, declarado no m√©todo obrigat√≥rio render. Nesse caso, Greeting retorna: <h1>Hello, {this.props.name}</h1>;

4. O componente Greeting possui como propriedade um objeto chamado props, que cont√©m todos os dados passados como par√¢metro na hora de chamar um componente, ou seja, chamar <Greeting name="Samuel" /> faz com que o componente tenha uma prop igual a { name: "Samuel" };

5. Exportamos o componente Greeting de forma que ele possa ser reutilizado na aplica√ß√£o.

--- Props

As props s√£o umas das partes mais importantes de um componente. S√£o por elas que passamos os valores para o componente, e √© como o torna reutiliz√°vel em diferentes contextos. Elas s√£o como os par√¢metros de uma fun√ß√£o.

Observe o exemplo abaixo de como seria uma fun√ß√£o que retornaria a mesma mensagem que o componente Greeting renderiza:

<!-- function greeting(name){
  return `Hello, ${name}`;
}
console.log(greeting('Samuel')); -->

‚ö†Ô∏èAviso: Assim como podemos ter v√°rios par√¢metros em uma fun√ß√£o, conseguimos tamb√©m passar in√∫meras propriedades para o componente por meio das props. Adicionemos o sobrenome da pessoa √† fun√ß√£o e ao componente.

<!-- function greeting(name, lastName){
  return `Hello, ${name} ${lastName}`;
}
console.log(greeting('Samuel', 'Silva')); -->

Ao componente Greeting:

<!-- import React from 'react';

class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name} {this.props.lastName}</h1>;
  }
}

export default Greeting; -->

Visando seguir as boas pr√°ticas nas suas aplica√ß√µes, voc√™ pode desestruturar as props. Para isso, basta refatorar o c√≥digo anterior, no qual o componente Greeting ficar√° da seguinte forma:

<!-- import React from 'react';

class Greeting extends React.Component {
  render() {
    const { name, lastName } = this.props;
    return <h1>Hello, {name} {lastName}</h1>;
  }
}

export default Greeting; -->

Agora o chamamos dentro do componente App:

import React from 'react';
import Greeting from './Greeting';

<!-- class App extends React.Component {
  render() {
    return (
      <main>
        <Greeting name="Samuel" lastName="Silva" />
      </main>
    );
  }
}

export default App; -->

Observe como a chamada do componente lembra a chamada de uma fun√ß√£o com passagem de par√¢metros. Nesse exemplo, o retorno do componente ser√° a tag <h1>Hello, Samuel Silva</h1>.

Voc√™ pode estar se perguntando: ‚Äúentendi que o uso de props √© importante e como devemos pass√°-las para um componente, mas como funciona exatamente o tr√¢mite das props?‚Äùü§î

Para compreender melhor, vamos analisar com mais cuidado a linha 06 do c√≥digo anterior. Ao atribuir as props name e lastName ao componente Greeting, o React automaticamente monta um objeto contendo as informa√ß√µes passadas e as disponibiliza para o componente montado numa vari√°vel chamada props, em um formato parecido com esse:

<!-- const props = { name: 'Samuel', lastName: 'Silva' } -->

Esse objeto props, por sua vez, √© passado para o componente Greeting, o qual poder√° resgatar tanto o nome como o sobrenome por meio do this.props.name e this.props.lastName.

-------- Chegou a hora de praticar por meio deste exerc√≠cio de fixa√ß√£o! --------

üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ

üöÄ Exerc√≠cio 1

Crie uma aplica√ß√£o React na sua m√°quina via create-react-app com o nome exercise-image-component.

Ap√≥s isso, crie um arquivo Image.js no diret√≥rio src do projeto e copie para esse arquivo o c√≥digo escrito abaixo. Realizada todas as solicita√ß√µes, responda:

<!-- import React from 'react';

class Image extends React.Component {
  render() {
    const { source, alternativeText } = this.props;
    return <img src={ source } alt={ alternativeText } />;
  }
}

export default Image; -->

1.Qual √© o nome do componente declarado acima?

2.Chame o componente Image dentro do componente App, de forma que seja mostrada esta imagem ou o texto: Cute cat staring, caso a imagem n√£o consiga ser carregada.
