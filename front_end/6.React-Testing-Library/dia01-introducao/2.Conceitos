Conceitos do RTL
Antes de começar os estudos com testes automatizados, é importante entender que, para desenvolver um bom teste, você precisa pensar em quais casos de uso deverão ser testados, e não quais funções testar.

Você pode estar se perguntando: “ O que são casos de uso?” Citando o dicionário de Oxford (tradução livre) temos a resposta:

Uma situação específica em que um produto ou serviço pode, potencialmente, ser usado. Pense nos projetos anteriores do curso. Por exemplo:

Em um e-commerce, uma pessoa pode filtrar por uma categoria, adicionar um produto ao carrinho e finalizar a compra. Isso é um caso de uso.

A pessoa pode, por outro lado, não filtrar por categoria alguma, adicionar vários produtos ao carrinho de uma vez, e não finalizar a compra. Isso é outro caso de uso.

Em um to do list, adicionar uma tarefa nova é um caso de uso.

Deletar uma tarefa é um caso de uso.

Marcar uma tarefa é um caso de uso.

Desmarcar uma tarefa é um caso de uso.

Agora está ficando mais evidente? Vamos entender se há ferramentas que podem nos auxiliar.

Cobertura de Código e Cobertura com Testes Automatizados
O principal objetivo da Cobertura de Código (code coverage), ou Cobertura de Testes é evidenciar quais linhas do código foram testadas e quais não estão sendo exploradas nos testes. É importante salientar que um projeto com cobertura de código alta não significa necessariamente que os testes não podem melhorar: cobertura alta é somente o primeiro passo!

Existem diversos softwares que checam para nós a cobertura de código. Em linhas gerais, os resultados podem evidenciar:

a proporção de linhas do seu código que é executada;

se há linhas que “nunca” serão executadas - problemas com if else, por exemplo;

a quantidade de funções externas que é chamada;

blocos de código repetitivos e/ou códigos inalcançáveis.

Se o resultado nos mostra que há uma cobertura alta, podemos dizer que o código foi bastante testado e tem uma chance menor de conter erros, mas não diz nada sobre a qualidade do código, o que só pode ser medido pela Cobertura dos Casos de Uso.

Casos de uso x Cobertura de código
Casos de uso são possibilidades de usos do sistema. Exemplo: quais passos a pessoa usuária precisa seguir para fazer um login no sistema e o que é esperado ao fim do login tanto no sucesso quanto na falha? E se a pessoa não digitar o user? Ou a senha? E se a senha estiver incorreta? Cada uma dessas situações é um caso de uso diferente. Mais importante do que garantir a cobertura do código, algo que já é crucial, é garantir que seus testes abordam todos os casos de uso da sua aplicação. Para isto, é preciso criar testes automatizados que simulam uma pessoa acessando a página, fazendo uma sequência de ações que resulta naquele caso de uso.

A seguir, vamos conhecer a react-testing-library, ferramenta de testes automatizados recomendada pela documentação do React. Nela, faremos testes sempre pensando em casos de uso!

Introdução ao RTL
No conteúdo de testes já visto no curso, funções eram testadas. Já no RTL o objetivo é testar comportamento, como se algo aparece ou não na tela. Por exemplo:

Podemos testar se a nossa página possui um título específico;

Em uma lista de tarefas, como o projeto To do list, precisamos verificar, por exemplo, se a funcionalidade de adicionar uma nova tarefa funciona. Para isso, devemos simular o comportamento de quem usa, que seria adicionar um texto no campo de texto alvo e clicar no botão que adiciona a nova tarefa. Para testar se funcionou, verificamos se o texto aparece em algum lugar da página. O RTL nos dá as ferramentas necessárias para realizar essa simulação!

Esses são apenas alguns dentre muitos exemplos! Agora, veremos por meio de um passo a passo a estrutura desses testes e suas ferramentas:

Passo 1: Crie uma nova aplicação com o comando npx create-react-app testes-react. Note que a biblioteca RTL já vem instalada nos novos projetos.

Passo 2: Abra a aplicação no VSCode e o arquivo App.test.js.

Passo 3: Observe o arquivo App.test.js:

<!-- import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
}); -->

Note que ele está fazendo uma verificação se algum elemento dentro do componente App possui o texto “learn react” (/string/i é utilizado para ignorar case sensitive, ou seja, não diferenciar letras maiúsculas e minúsculas).

Para rodar os testes vá para a pasta src e execute npm test. Caso apareça a mensagem abaixo basta clicar na tecla “a”.

Após clicar a tecla “a”, este deve ser o resultado:

Como podemos ver, o nosso único teste passou. Quer dizer que existe o texto “learn react” dentro do componente App! Se rodar aplicação com o npm start, você encontrará o texto “learn react”, conforme indicado pelo teste.

Agora, vamos provocar um erro ou uma falha. Mude o texto “learn react” para “algo que não aparece” e rode o teste. Seu terminal acusará este erro:

Observe que ele está falando que não foi possível encontrar um elemento o qual possui o texto “/algo que não aparece/i”.

Agora, dê uma olhada na cheatsheet da react-testing-library. Ela explica de forma resumida como a biblioteca funciona. Nos aprofundaremos nas explicações posteriormente!

Ao executar o comando npx create-react-app, por padrão, é criado o arquivo setupTests.js. Dentro dele, temos comentários e uma importação; esta importação fornece para nossos testes o que chamamos de seletores customizados do Jest (custom jest matchers). O .toBeInTheDocument(), no exemplo acima, é um deles, e você pode consultar outros na documentação do jest-dom sempre que precisar.

Veja no vídeo abaixo o RTL sendo aplicado na prática!

Agora, veremos cada parte do código para entender como que a biblioteca de teste funciona. Para testar uma aplicação, precisamos seguir alguns passos:

Renderização
Testar um componente significa, em poucas palavras, renderizá-lo em um browser real ou em uma simulação de um browser e testar nele o comportamento desejado. Na RTL, é necessário o uso da função render() para fazer isso. A função render() faz a renderização de um componente em memória para que se possa simular as interações com esse componente.

<!-- import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
}); -->

Para usar o seletor/query getByText, precisamos usar o screen.getByText. Observe que ele é muito parecido com os seletores do DOM, como o document.getElementById() ou document.querySelector().

Seguindo a mesma lógica, ao usar o screen.getByText(), ele retornará um elemento html. A vantagem de utilizar o screen é que você não precisará atualizar e desestruturar a chamada do render para todo teste que você fizer, pois é possível consultar e utilizar todos os elementos do DOM por meio do próprio screen. Em outras palavras, ele receberá um objeto com os elementos contidos no DOM e você poderá acessar as propriedades desse objeto através dele.

Seletores
Seletores ou Queries são métodos que usamos para indicar ao RTL algum elemento da nossa aplicação e assim podermos realizar nossos testes e comparações.

Veremos agora algumas formas de buscar por algum elemento HTML. No exemplo anterior, foi visto apenas o getByText o qual busca por um elemento que possui determinado texto. Assista ao vídeo abaixo, o qual apresenta outros exemplos de seletores, como o getByRole e getByLabelText.

Todos os seletores (queries) estão disponíveis nessa lista de queries da react-testing-library, mas não é necessário ler toda a documentação! Use-a para tirar dúvidas ou procurar algum assunto específico. Além disso, veremos algumas queries durante a aula.

Mas como fazer para buscar um elemento que não possui um texto? Como um input? Para isso, existem outros seletores.

Vamos acrescentar um input de e-mail ao arquivo App.js:

<!-- // App.// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
    </div>
  );
}

export default App; -->

Pronto, mudamos a estrutura e adicionamos um campo email com uma label dentro do nosso arquivo App.js. Agora, precisamos testar se esse input está, de fato, aparecendo na tela. Como ele não possui um texto, não podemos usar o getByText, mas podemos usar o getByLabelText, onde ele pegará o input de acordo com o texto da label que está associado a ele. Nesse caso, o input está relacionado com a label Email.

<!-- // App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('Verificando se existe o campo Email.', () => {
  render(<App />);
  const inputEmail = screen.getByLabelText('Email');
  expect(inputEmail).toBeInTheDocument();
  expect(inputEmail).toHaveProperty('type', 'email');
}); -->

Como pode ver, mudamos os expects também, verificando se o elemento está na tela e é do tipo correto.

Mas e se um campo não tiver texto nem label? Podemos usar o getByRole. Ele busca pelo atributo role. No caso de um botão, o role é definido pela propriedade type="button". O role serve, por exemplo, para buscar por um elemento <button>Enviar<button/> ou <input type="button" value="Enviar" />.

Adicione um botão ao App.js.

<!-- // App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
      <input id="btn-send" type="button" value="Enviar" />
    </div>
  );
}

export default App; -->

Também adicione o teste abaixo dentro do arquivo App.test.js:

<!-- test('Verificando se existe um botão', () => {
  render(<App />);
  const btn = screen.getByRole('button');
  expect(btn).toBeInTheDocument(); 
});-->

Agora, adicione um novo botão na aplicação.

// A// App.js
import React from 'react';
import './App.css';

<!-- function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
      <input id="btn-send" type="button" value="Enviar" />
      <input id="btn-back" type="button" value="Voltar" />
    </div>
  );
}

export default App; -->
.
